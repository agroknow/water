<?php

function agrovocfield_install() {
  // set schema_version to -1 to allow use of hook_update_N
  db_update('system')
  ->fields(array('schema_version' => '7000'))
  ->condition('name', 'agrovocfield', '=')
  ->execute();
}

/**
 * Implements hook_schema().
 */
function agrovocfield_schema() {
 $schema['agrovocfield_data'] = array(
  'description' => 'AGROVOC database',
  'fields' => array(
    'termcode' => array(
      'description' => 'TODO: please describe this field!',
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
    ),
    'languagecode' => array(
      'description' => 'TODO: please describe this field!',
      'type' => 'varchar',
      'length' => '2',
      'not null' => TRUE,
    ),
    'termspell' => array(
      'description' => 'TODO: please describe this field!',
      'type' => 'varchar',
      'length' => '170',
      'not null' => TRUE,
    ),
  ),
  'primary key' => array('termcode', 'languagecode', 'termspell'),
  'indexes' => array(
    'agrovocterm_languagecode' => array('languagecode'),
    'agrovocterm_termcode' => array('termcode'),
    'agrovocterm_termspell' => array('termspell'),
  ),
);

$schema['agrovocfield_index'] = array(
  'description' => 'Maintains relationships among Drupal and AGROVOC database',
  'fields' => array(
    'i18n_tsid' => array(
      'description' => 'The primary identifier for a translation set.',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
    ),
    'aid' => array(
      'description' => 'The primary identifier for a AGROVOC term',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
    ),
  ),
  'primary key' => array('i18n_tsid'),
  'indexes' => array(
    'aid' => array('aid'),
    'i18n_tsid' => array('i18n_tsid'),
  ),
);
  return $schema;
}

/**
 * Load AGROVOC data to Drupal database
 */
function agrovocfield_update_7100(&$sandbox) {
$ret = array();
$filepath = @realpath(dirname(__FILE__) . '/db/agrovocterm.csv');
$handle = fopen($filepath, "r");
  
// http://drewish.com/node/123
// Initialize batch update information.
if (!isset($sandbox['progress'])) {
  $sandbox['progress'] = 0;
  // first position of pointer 
  $sandbox['last_processed'] = 0;
  $sandbox['max'] = filesize($filepath);
  }  
 
fseek($handle, $sandbox['last_processed']);
$i = 0;
while (!feof($handle)) {
  $i++;
  $rawline = fgets($handle);
  $rows[] = $rawline;
  // each 1000 lines (is arbitrary)
  if ($i == 10000 || feof($handle)) {
    $sandbox['last_processed'] = ftell($handle);
    break;
  }
}

fclose($handle);
// perform an operation with bunch of nodes

if (isset($rows)) {
   foreach ($rows as $row) {
      $line = explode('|', $row);
      // check out if first field of each line is ok, if not... jump the loop
      if ($line[0] == '' && !is_integer($line[0]) || $line[0] == 'NULL') {
        continue;
      }
      // build array of fields to storing
      $fields = array();
      if ($line[0] !== 'NULL') {
        $fields['termcode'] = $line[0];
      }
      if ($line[1] !== 'NULL') {
        $fields['languagecode'] = $line[1];
      } 
      if ($line[2] !== 'NULL') {
        $fields['termspell'] = trim($line[2]);
      } 
      db_insert('agrovocfield_data')->fields($fields)->execute();
    }
    $sandbox['progress'] = $sandbox['last_processed'];
  }
  // clean memory      
  unset($handle);
  unset($i);
  unset($line);
  unset($rawline);
  unset($rows);
  unset($row);
  $sandbox['#finished'] = ($sandbox['progress'] == $sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
  return t('The terms of AGROVOC thesaurus were imported successfully');
  // In case of an error, simply throw an exception with an error message.
  throw new DrupalUpdateException('Something went wrong; here is what you should do.');
}